---
// Dark mode toggle component
---

<div class="fixed top-4 right-4 z-50">
  <button
    id="darkModeToggle"
    class="relative w-12 h-12 rounded-full bg-white dark:bg-ink-800 shadow-soft hover:shadow-chapter transition-all duration-300 flex items-center justify-center group"
    aria-label="Toggle dark mode"
  >
    <!-- Sun icon for light mode -->
    <svg
      class="w-6 h-6 text-butter-500 dark:hidden transition-all duration-300 group-hover:scale-110"
      fill="currentColor"
      viewBox="0 0 24 24"
    >
      <path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"/>
    </svg>
    
    <!-- Moon icon for dark mode -->
    <svg
      class="w-6 h-6 text-lavender-400 hidden dark:block transition-all duration-300 group-hover:scale-110"
      fill="currentColor"
      viewBox="0 0 24 24"
    >
      <path d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z"/>
    </svg>
  </button>
</div>

<!-- Theme transition overlay -->
<div id="themeTransitionOverlay" class="fixed inset-0 z-[9999] pointer-events-none opacity-0 transition-opacity duration-500">
  <div class="absolute inset-0 bg-gradient-to-br from-ink-900 via-ink-800 to-ink-900 transform scale-0 origin-top-left transition-all duration-1000 ease-out"></div>
</div>

<style>
  /* Theme transition animation */
  #themeTransitionOverlay {
    transition: opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  #themeTransitionOverlay.active {
    opacity: 1;
  }
  
  #themeTransitionOverlay .bg-gradient-to-br {
    transition: all 1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transform-origin: top left;
  }
  
  #themeTransitionOverlay.active .bg-gradient-to-br {
    transform: scale(4) translate(25%, 25%);
  }
  
  /* Ensure smooth transitions for all elements */
  * {
    transition-property: background-color, border-color, color, fill, stroke, opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 0.3s;
  }
  
  /* Prevent transition during the overlay animation */
  body.theme-transitioning * {
    transition: none !important;
  }
</style>

<script>
  // Enhanced dark mode toggle functionality with transition animation
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('darkModeToggle');
    const html = document.documentElement;
    const body = document.body;
    const overlay = document.getElementById('themeTransitionOverlay');
    const overlayBg = overlay?.querySelector('.bg-gradient-to-br');
    
    // Get current theme state
    function getCurrentTheme() {
      return html.classList.contains('dark') ? 'dark' : 'light';
    }
    
    // Check for saved theme preference or default to system preference
    function initializeTheme() {
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        enableDarkMode();
      } else {
        disableDarkMode();
      }
    }
    
    function enableDarkMode() {
      html.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    }
    
    function disableDarkMode() {
      html.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
    
    async function toggleThemeWithAnimation() {
      if (!overlay || !overlayBg) return;
      
      const currentTheme = getCurrentTheme();
      const isTransitioningToDark = currentTheme === 'light';
      
      // Add transitioning class to prevent other transitions
      body.classList.add('theme-transitioning');
      
      // Show overlay
      overlay.classList.add('active');
      
      // Wait for overlay to be visible
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // Trigger the diagonal sweep animation
      if (overlayBg instanceof HTMLElement) {
        overlayBg.style.transform = 'scale(4) translate(25%, 25%)';
      }
      
      // Wait for animation to complete
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Toggle the theme
      if (isTransitioningToDark) {
        enableDarkMode();
      } else {
        disableDarkMode();
      }
      
      // Reset overlay
      if (overlayBg instanceof HTMLElement) {
        overlayBg.style.transform = 'scale(0)';
      }
      overlay.classList.remove('active');
      
      // Remove transitioning class
      body.classList.remove('theme-transitioning');
    }
    
    function toggleTheme() {
      toggleThemeWithAnimation();
    }
    
    // Initialize theme on page load
    initializeTheme();
    
    // Add event listener for toggle button
    toggle?.addEventListener('click', toggleTheme);
    
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      // Only update if user hasn't set a preference
      if (!localStorage.getItem('theme')) {
        if (e.matches) {
          enableDarkMode();
        } else {
          disableDarkMode();
        }
      }
    });
  });
</script> 