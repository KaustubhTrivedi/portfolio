---
import DarkModeToggle from '../components/DarkModeToggle.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Portfolio" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="light dark" />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Quicksand:wght@300;400;500;600;700&family=Crimson+Text:ital,wght@0,400;0,600;1,400&display=swap"
      rel="stylesheet"
    />
    
    <!-- Critical CSS to prevent flash -->
    <style>
      /* Hide body until theme is determined */
      body { visibility: hidden; }
      
      /* Show body once theme is applied */
      body.theme-loaded { visibility: visible; }
      
      /* Prevent any flash during theme detection */
      html { background-color: transparent; }
    </style>
    
    <!-- Enhanced theme initialization script to prevent flash -->
    <script>
      (function() {
        // Immediately execute to prevent any flash
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        // Determine the theme
        const shouldUseDark = savedTheme === 'dark' || (!savedTheme && prefersDark);
        
        // Apply theme immediately
        if (shouldUseDark) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        
        // Show the body once theme is applied
        document.body.classList.add('theme-loaded');
        
        // Additional safety check for any remaining flash
        const observer = new MutationObserver(function(mutations) {
          mutations.forEach(function(mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
              // Ensure theme is maintained
              const currentTheme = localStorage.getItem('theme');
              const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
              const shouldUseDark = currentTheme === 'dark' || (!currentTheme && prefersDark);
              
              if (shouldUseDark && !document.documentElement.classList.contains('dark')) {
                document.documentElement.classList.add('dark');
              } else if (!shouldUseDark && document.documentElement.classList.contains('dark')) {
                document.documentElement.classList.remove('dark');
              }
            }
          });
        });
        
        // Start observing
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ['class']
        });
      })();
    </script>
  </head>
  
  <body class="bg-parchment-100 dark:bg-ink-900 text-ink-800 dark:text-ink-100 font-body leading-relaxed transition-colors duration-300">
    <DarkModeToggle />
    <main>
      <slot />
    </main>
  </body>
</html> 